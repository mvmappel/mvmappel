#region Using declarations
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media;
using System.Xml.Serialization;
using NinjaTrader.Cbi;
using NinjaTrader.Gui;
using NinjaTrader.Gui.Chart;
using NinjaTrader.Gui.SuperDom;
using NinjaTrader.Gui.Tools;
using NinjaTrader.Data;
using NinjaTrader.NinjaScript;
using NinjaTrader.Core.FloatingPoint;
using NinjaTrader.NinjaScript.Indicators;
using NinjaTrader.NinjaScript.DrawingTools;
#endregion

//This namespace holds Strategies in this folder and is required. Do not change it. 
namespace NinjaTrader.NinjaScript.Strategies
{
	public class MAsORBStrategy : Strategy
	{
		
		private double ORHigh;
		private double ORLow;
		private string atmStrategyId 		= string.Empty;
		private string orderIdB		 		= string.Empty;
		private string orderIdS		 		= string.Empty;
		private bool   isAtmStrategyCreated	= false;	
		
		protected override void OnStateChange()
		{
			if (State == State.SetDefaults)
			{
				Description									= @"A strategy that trades off the opening range high and low";
				Name										= "MAsORBStrategy";
				Calculate									= Calculate.OnBarClose;
				EntriesPerDirection							= 1;
				EntryHandling								= EntryHandling.AllEntries;
				IsExitOnSessionCloseStrategy				= true;
				ExitOnSessionCloseSeconds					= 30;
				IsFillLimitOnTouch							= false;
				MaximumBarsLookBack							= MaximumBarsLookBack.TwoHundredFiftySix;
				OrderFillResolution							= OrderFillResolution.Standard;
				Slippage									= 0;
				StartBehavior								= StartBehavior.WaitUntilFlat;
				TimeInForce									= TimeInForce.Gtc;
				TraceOrders									= false;
				RealtimeErrorHandling						= RealtimeErrorHandling.StopCancelClose;
				StopTargetHandling							= StopTargetHandling.PerEntryExecution;
				BarsRequiredToTrade							= 20;
				IsAutoScale									= false;
				// Disable this property for performance gains in Strategy Analyzer optimizations
				// See the Help Guide for additional information
				IsInstantiatedOnEachOptimizationIteration	= true;
				OrStartTime						= DateTime.Parse("08:30", System.Globalization.CultureInfo.InvariantCulture);
				OrEndTime						= DateTime.Parse("08:45", System.Globalization.CultureInfo.InvariantCulture);
				AddPlot(Brushes.Red, "OrHighPlot");
				AddPlot(Brushes.Green, "OrLowPlot");
				SunOk							= false;
				MonOk                        	= true;
				TuesOk							= true;
				WedOk							= true;
				ThursOk							= true;
				FriOk							= true;
				SatOk							= false;
				SL                              = 75;
				PT                              = 150;
				Qty                            	= 1;
				ATMon							= false;
			}
			else if (State == State.Configure)
			{
				SetProfitTarget(@"Long", CalculationMode.Currency, PT);
				SetProfitTarget(@"Short", CalculationMode.Currency, PT);
				SetStopLoss(@"Long", CalculationMode.Currency, SL, false);
				SetStopLoss(@"Short", CalculationMode.Currency, SL, false);				
			}
		}

		protected override void OnBarUpdate()
		{
			//Add your custom strategy logic here.
			if (CurrentBar < 20) return;
			
			bool TradeDayOk = true;
			switch (Time[0].DayOfWeek) {
				case DayOfWeek.Sunday:
					if (!SunOk) {TradeDayOk = false;}
					break;
				case DayOfWeek.Monday:
					if (!MonOk) {TradeDayOk = false;}
					break;
				case DayOfWeek.Tuesday:
					if (!TuesOk) {TradeDayOk = false;}
					break;
				case DayOfWeek.Wednesday:
					if (!WedOk) {TradeDayOk = false;}
					break;
				case DayOfWeek.Thursday:
					if (!ThursOk) {TradeDayOk = false;}
					break;
				case DayOfWeek.Friday:
					if (!FriOk) {TradeDayOk = false;}
					break;
				case DayOfWeek.Saturday:
					if (!SatOk) {TradeDayOk = false;}
					break;									
			}
			
			if (!TradeDayOk) return;			
			
			if (State != State.Realtime) return;
				
			if (Times[0][0].TimeOfDay == OrStartTime.TimeOfDay) {
				ORLow = Low[0];
				ORHigh = High[0];
			}
			
			if (Times[0][0].TimeOfDay > OrStartTime.TimeOfDay && Times[0][0].TimeOfDay < OrEndTime.TimeOfDay) {
					if (Low[0] < ORLow)
						ORLow = Low[0];
					
					if (High[0] > ORHigh)
						ORHigh = High[0];
			}
					
			OrHighPlot[0] = ORHigh;
			OrLowPlot[0] = ORLow;
			
			if (ATMon) {
				if (Times[0][0].TimeOfDay > OrEndTime.TimeOfDay && atmStrategyId.Length == 0 && CrossAbove(Close, ORHigh, 1)) {
					
						isAtmStrategyCreated = false;
						atmStrategyId = GetAtmStrategyUniqueId();
						orderIdB = GetAtmStrategyUniqueId();
						
						double buyPrice = 0.0;
						buyPrice = GetCurrentAsk() + 4 * TickSize;
						
						AtmStrategyCreate(OrderAction.Buy, OrderType.Market, 0, buyPrice, TimeInForce.Day, orderIdB, "MAsORB_ATM_75150_28T", atmStrategyId, (atmCallbackErrorCode, atmCallBackId) => {
							if (atmCallbackErrorCode == ErrorCode.NoError && atmCallBackId == atmStrategyId)
								isAtmStrategyCreated = true;
						});
				}
			
				if (Times[0][0].TimeOfDay > OrEndTime.TimeOfDay && atmStrategyId.Length == 0 && CrossBelow(Close, ORLow, 1)) {
					
						isAtmStrategyCreated = false;
						atmStrategyId = GetAtmStrategyUniqueId();
						orderIdS = GetAtmStrategyUniqueId();
						
						double sellPrice = 0.0;
						sellPrice = GetCurrentAsk() - 4 * TickSize;
						
						AtmStrategyCreate(OrderAction.Sell, OrderType.Market, 0, sellPrice, TimeInForce.Day, orderIdS, "MAsORB_ATM_75150_28T", atmStrategyId, (atmCallbackErrorCode, atmCallBackId) => {
							if (atmCallbackErrorCode == ErrorCode.NoError && atmCallBackId == atmStrategyId)
								isAtmStrategyCreated = true;
						});
				}
						
				if (!isAtmStrategyCreated)
					return;
				
				if (orderIdB.Length > 0) {
					string[] status = GetAtmStrategyEntryOrderStatus(orderIdB);
					
					if (status.GetLength(0) > 0) {
						if (status[2] == "Filled" || status[2] == "Cancelled" || status[2] == "Rejected")
							orderIdB = string.Empty;
					}
				} else if (orderIdS.Length > 0) {
					string[] status = GetAtmStrategyEntryOrderStatus(orderIdS);
					
					if (status.GetLength(0) > 0) {
						if (status[2] == "Filled" || status[2] == "Cancelled" || status[2] == "Rejected")
							orderIdS = string.Empty;
					}
				} else if (atmStrategyId.Length > 0 && GetAtmStrategyMarketPosition(atmStrategyId) == Cbi.MarketPosition.Flat)
					atmStrategyId = string.Empty;
			} else {
				if (Times[0][0].TimeOfDay > OrEndTime.TimeOfDay && CrossAbove(Close, ORHigh, 1)) {
					EnterLong(Convert.ToInt32(Qty), @"Long");				
				}
				
				if (Times[0][0].TimeOfDay > OrEndTime.TimeOfDay && CrossBelow(Close, ORLow, 1)) {
					EnterShort(Convert.ToInt32(Qty), @"Short");
				}
			}
		}

		#region Properties
		[NinjaScriptProperty]
		[PropertyEditor("NinjaTrader.Gui.Tools.TimeEditorKey")]
		[Display(Name="OrStartTime", Order=1, GroupName="Parameters")]
		public DateTime OrStartTime
		{ get; set; }

		[NinjaScriptProperty]
		[PropertyEditor("NinjaTrader.Gui.Tools.TimeEditorKey")]
		[Display(Name="OrEndTime", Order=2, GroupName="Parameters")]
		public DateTime OrEndTime
		{ get; set; }
		
		[NinjaScriptProperty]
		[Display(Name="SunOk", Order=10, GroupName="Parameters")]
		public bool SunOk
		{ get; set; }

		[NinjaScriptProperty]
		[Display(Name="MonOk", Order=11, GroupName="Parameters")]
		public bool MonOk
		{ get; set; }

		[NinjaScriptProperty]
		[Display(Name="TuesOk", Order=12, GroupName="Parameters")]
		public bool TuesOk
		{ get; set; }

		[NinjaScriptProperty]
		[Display(Name="WedOk", Order=13, GroupName="Parameters")]
		public bool WedOk
		{ get; set; }

		[NinjaScriptProperty]
		[Display(Name="ThursOk", Order=14, GroupName="Parameters")]
		public bool ThursOk
		{ get; set; }

		[NinjaScriptProperty]
		[Display(Name="FriOk", Order=15, GroupName="Parameters")]
		public bool FriOk
		{ get; set; }

		[NinjaScriptProperty]
		[Display(Name="SatOk", Order=16, GroupName="Parameters")]
		public bool SatOk
		{ get; set; }
		
		[NinjaScriptProperty]
		[Range(1, int.MaxValue)]
		[Display(Name="SL", Order=17, GroupName="Parameters")]
		public int SL
		{ get; set; }
		
		[NinjaScriptProperty]
		[Range(1, int.MaxValue)]
		[Display(Name="PT", Order=18, GroupName="Parameters")]
		public int PT
		{ get; set; }

		[NinjaScriptProperty]
		[Display(Name="ATMon", Order=19, GroupName="Parameters")]
		public bool ATMon
		{ get; set; }
		
		[NinjaScriptProperty]
		[Range(1, int.MaxValue)]
		[Display(Name="Qty", Order=20, GroupName="Parameters")]
		public int Qty
		{ get; set; }		
		
		[Browsable(false)]
		[XmlIgnore]
		public Series<double> OrHighPlot
		{
			get { return Values[0]; }
		}

		[Browsable(false)]
		[XmlIgnore]
		public Series<double> OrLowPlot
		{
			get { return Values[1]; }
		}
		#endregion

	}
}
